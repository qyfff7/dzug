// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package relation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DouyinRelationActionServiceClient is the client API for DouyinRelationActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DouyinRelationActionServiceClient interface {
	DouyinRelationAction(ctx context.Context, in *DouyinRelationActionRequest, opts ...grpc.CallOption) (*DouyinRelationActionResponse, error)
	DouyinRelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowListResponse, error)
	DouyinRelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowerListResponse, error)
	DouyinRelationFriendList(ctx context.Context, in *DouyinRelationFriendListRequest, opts ...grpc.CallOption) (*DouyinRelationFriendListResponse, error)
}

type douyinRelationActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDouyinRelationActionServiceClient(cc grpc.ClientConnInterface) DouyinRelationActionServiceClient {
	return &douyinRelationActionServiceClient{cc}
}

func (c *douyinRelationActionServiceClient) DouyinRelationAction(ctx context.Context, in *DouyinRelationActionRequest, opts ...grpc.CallOption) (*DouyinRelationActionResponse, error) {
	out := new(DouyinRelationActionResponse)
	err := c.cc.Invoke(ctx, "/relation.DouyinRelationActionService/DouyinRelationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinRelationActionServiceClient) DouyinRelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowListResponse, error) {
	out := new(DouyinRelationFollowListResponse)
	err := c.cc.Invoke(ctx, "/relation.DouyinRelationActionService/DouyinRelationFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinRelationActionServiceClient) DouyinRelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...grpc.CallOption) (*DouyinRelationFollowerListResponse, error) {
	out := new(DouyinRelationFollowerListResponse)
	err := c.cc.Invoke(ctx, "/relation.DouyinRelationActionService/DouyinRelationFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinRelationActionServiceClient) DouyinRelationFriendList(ctx context.Context, in *DouyinRelationFriendListRequest, opts ...grpc.CallOption) (*DouyinRelationFriendListResponse, error) {
	out := new(DouyinRelationFriendListResponse)
	err := c.cc.Invoke(ctx, "/relation.DouyinRelationActionService/DouyinRelationFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DouyinRelationActionServiceServer is the server API for DouyinRelationActionService service.
// All implementations must embed UnimplementedDouyinRelationActionServiceServer
// for forward compatibility
type DouyinRelationActionServiceServer interface {
	DouyinRelationAction(context.Context, *DouyinRelationActionRequest) (*DouyinRelationActionResponse, error)
	DouyinRelationFollowList(context.Context, *DouyinRelationFollowListRequest) (*DouyinRelationFollowListResponse, error)
	DouyinRelationFollowerList(context.Context, *DouyinRelationFollowerListRequest) (*DouyinRelationFollowerListResponse, error)
	DouyinRelationFriendList(context.Context, *DouyinRelationFriendListRequest) (*DouyinRelationFriendListResponse, error)
	mustEmbedUnimplementedDouyinRelationActionServiceServer()
}

// UnimplementedDouyinRelationActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDouyinRelationActionServiceServer struct {
}

func (*UnimplementedDouyinRelationActionServiceServer) DouyinRelationAction(context.Context, *DouyinRelationActionRequest) (*DouyinRelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinRelationAction not implemented")
}
func (*UnimplementedDouyinRelationActionServiceServer) DouyinRelationFollowList(context.Context, *DouyinRelationFollowListRequest) (*DouyinRelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinRelationFollowList not implemented")
}
func (*UnimplementedDouyinRelationActionServiceServer) DouyinRelationFollowerList(context.Context, *DouyinRelationFollowerListRequest) (*DouyinRelationFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinRelationFollowerList not implemented")
}
func (*UnimplementedDouyinRelationActionServiceServer) DouyinRelationFriendList(context.Context, *DouyinRelationFriendListRequest) (*DouyinRelationFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinRelationFriendList not implemented")
}
func (*UnimplementedDouyinRelationActionServiceServer) mustEmbedUnimplementedDouyinRelationActionServiceServer() {
}

func RegisterDouyinRelationActionServiceServer(s *grpc.Server, srv DouyinRelationActionServiceServer) {
	s.RegisterService(&_DouyinRelationActionService_serviceDesc, srv)
}

func _DouyinRelationActionService_DouyinRelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.DouyinRelationActionService/DouyinRelationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationAction(ctx, req.(*DouyinRelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DouyinRelationActionService_DouyinRelationFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.DouyinRelationActionService/DouyinRelationFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationFollowList(ctx, req.(*DouyinRelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DouyinRelationActionService_DouyinRelationFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.DouyinRelationActionService/DouyinRelationFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationFollowerList(ctx, req.(*DouyinRelationFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DouyinRelationActionService_DouyinRelationFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.DouyinRelationActionService/DouyinRelationFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRelationActionServiceServer).DouyinRelationFriendList(ctx, req.(*DouyinRelationFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DouyinRelationActionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relation.DouyinRelationActionService",
	HandlerType: (*DouyinRelationActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DouyinRelationAction",
			Handler:    _DouyinRelationActionService_DouyinRelationAction_Handler,
		},
		{
			MethodName: "DouyinRelationFollowList",
			Handler:    _DouyinRelationActionService_DouyinRelationFollowList_Handler,
		},
		{
			MethodName: "DouyinRelationFollowerList",
			Handler:    _DouyinRelationActionService_DouyinRelationFollowerList_Handler,
		},
		{
			MethodName: "DouyinRelationFriendList",
			Handler:    _DouyinRelationActionService_DouyinRelationFriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}

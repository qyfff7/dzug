// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: comment.proto

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DouyinCommentService_Action_FullMethodName = "/idl.DouyinCommentService/Action"
	DouyinCommentService_List_FullMethodName   = "/idl.DouyinCommentService/List"
)

// DouyinCommentServiceClient is the client API for DouyinCommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DouyinCommentServiceClient interface {
	Action(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error)
	List(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error)
}

type douyinCommentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDouyinCommentServiceClient(cc grpc.ClientConnInterface) DouyinCommentServiceClient {
	return &douyinCommentServiceClient{cc}
}

func (c *douyinCommentServiceClient) Action(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error) {
	out := new(DouyinCommentActionResponse)
	err := c.cc.Invoke(ctx, DouyinCommentService_Action_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinCommentServiceClient) List(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error) {
	out := new(DouyinCommentListResponse)
	err := c.cc.Invoke(ctx, DouyinCommentService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DouyinCommentServiceServer is the server API for DouyinCommentService service.
// All implementations must embed UnimplementedDouyinCommentServiceServer
// for forward compatibility
type DouyinCommentServiceServer interface {
	Action(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error)
	List(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error)
	mustEmbedUnimplementedDouyinCommentServiceServer()
}

// UnimplementedDouyinCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDouyinCommentServiceServer struct {
}

func (UnimplementedDouyinCommentServiceServer) Action(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedDouyinCommentServiceServer) List(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDouyinCommentServiceServer) mustEmbedUnimplementedDouyinCommentServiceServer() {}

// UnsafeDouyinCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DouyinCommentServiceServer will
// result in compilation errors.
type UnsafeDouyinCommentServiceServer interface {
	mustEmbedUnimplementedDouyinCommentServiceServer()
}

func RegisterDouyinCommentServiceServer(s grpc.ServiceRegistrar, srv DouyinCommentServiceServer) {
	s.RegisterService(&DouyinCommentService_ServiceDesc, srv)
}

func _DouyinCommentService_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinCommentServiceServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DouyinCommentService_Action_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinCommentServiceServer).Action(ctx, req.(*DouyinCommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DouyinCommentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinCommentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DouyinCommentService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinCommentServiceServer).List(ctx, req.(*DouyinCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DouyinCommentService_ServiceDesc is the grpc.ServiceDesc for DouyinCommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DouyinCommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.DouyinCommentService",
	HandlerType: (*DouyinCommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Action",
			Handler:    _DouyinCommentService_Action_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DouyinCommentService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
